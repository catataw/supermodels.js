!function(e){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var f;"undefined"!=typeof window?f=window:"undefined"!=typeof global?f=global:"undefined"!=typeof self&&(f=self),f.sm=e()}}(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){
var emitter = _dereq_('emitter-object');
var emitterArray = _dereq_('emitter-array');
var modelProto = _dereq_('./model').proto;
var modelDescriptors = _dereq_('./model').descriptors;
var modelPrototype = Object.create(modelProto, modelDescriptors);

var util = {
  typeOf: function(obj) {
    return Object.prototype.toString.call(obj).match(/\s([a-zA-Z]+)/)[1].toLowerCase();
  },
  isObject: function(value) {
    return this.typeOf(value) === 'object';
  },
  isArray: function(value) {
    return Array.isArray(value);
  },
  isSimple: function(value) {
    // 'Simple' here means anything 
    // other than an Object or an Array
    // i.e. number, string, date, bool, null, undefined, regex...
    return !this.isObject(value) && !this.isArray(value);
  },
  isFunction: function(value) {
    return this.typeOf(value) === 'function';
  },
  isDate: function(value) {
    return this.typeOf(value) === 'date';
  },
  cast: function(value, type) {
    if (!type) {
      return value;
    }

    switch (type) {
      case String:
        return utils.castString(value);
      case Number:
        return utils.castNumber(value);
      case Boolean:
        return utils.castBoolean(value);
      case Date:
        return utils.castDate(value);
      case Object:
      case Function:
        return value;
      default:
        throw new Error('Invalid cast');
    }
  },
  castString: function(value) {
    if (value === undefined || value === null || util.typeOf(value) === 'string') {
      return value;
    }
    return value.toString && value.toString();
  },
  castNumber: function(value) {
    if (value === undefined || value === null) {
      return NaN;
    }
    if (util.typeOf(value) === 'number') {
      return value;
    }
    return Number(value);
  },
  castBoolean: function(value) {
    if (!value) {
      return false;
    }
    var falsey = ['0', 'false', 'off', 'no'];
    return falsey.indexOf(value) === -1;
  },
  castDate: function(value) {
    if (value === undefined || value === null || util.typeOf(value) === 'date') {
      return value;
    }
    return new Date(value);
  }
};

function extend(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || typeof add !== 'object') return origin;

  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
}

function defineProperties(model, properties, __) {
  for (var prop in properties) {
    defineProperty(model, prop, properties[prop], __);
  }
}

function defineProperty(model, key, prop, __) {

  var caster = prop.cast;
  var desc = {
    get: prop.getter || function() {
      return this.__get(key);
    },
    enumerable: prop.enumerable,
    configurable: prop.configurable
  };

  if (prop.setter) {
    desc.set = function(value) {
      prop.setter.call(this, value);
      this.__notify(key, value);
    };
  } else {
    desc.set = function(value) {
      var val = caster ? caster(value) : value;
      this.__setNotifyChange(key, val);
    };
  }

  Object.defineProperty(model, key, desc);
  
  // Silently initialize the property value
  __[key] = prop.value(model);
}

function createRuntimeModelDescriptors(__, properties, parent) {
  return {
    __: {
      value: __
    },
    __properties: {
      value: properties
    },
    __parent: {
      value: parent
    }
  };
}

function createObjectModel(def, parent) {
  
  var __ = {};
  var properties = def.properties;
  var descriptors = createRuntimeModelDescriptors(__, properties, parent);
  var model = Object.create(modelPrototype, descriptors);
  
  emitter(model);
  
  defineProperties(model, properties, __);
  
  return model;
}

function createArrayModel(def, parent) {
  
  var __ = {};
  var properties = def.properties;
  var descriptors = createRuntimeModelDescriptors(__, properties, parent);
  var model = emitterArray(function() {}); 
  
  Object.defineProperties(model, modelDescriptors);
  
  emitter(model);
  
  Object.defineProperties(model, descriptors);
  
  extend(model, modelProto);

  defineProperties(model, properties, __);
  
  var itemDef = def.def;
  if (itemDef) {
    
    // We have a definition for the items 
    // that belong in this array.

      // Create a new prototype we can use to
      // create and validate the items in the array.
      // Set the parent of the prototype to the array
      //var arrItemModelPrototype = createModel(arr);

      // Validate new models by overriding the emitter array 
      // mutators that can cause new items to enter the array
      //overrideEmitterArrayAddingMutators(arr, arrItemModelPrototype);

      // Provide a convenient model factory 
      // for creating array item instances
      if (!itemDef.isSimple) {
        model.create = function() {
          return createModel(itemDef, model);
        };
      }
      
  }
  
  return model;
}

function createModel(def, parent) {
  if (def.isArray) {
    return createArrayModel(def, parent);
  } else {
    return createObjectModel(def, parent);
  }
}

function resolve(from) {
  var isCtor = ~[String, Number, Date, Boolean, Array, Object].indexOf(from);
  var isArray = util.isArray(from);

  if (isCtor || isArray) {
    return {
      __type: from
    };
  }

  var isValue = !util.isObject(from);
  if (isValue) {
    return {
      __value: from
    };
  }

  return from;
}

function createDef(from) {

  from = resolve(from);

  var __VALIDATORS = '__validators',
    __VALUE = '__value',
    __TYPE = '__type',
    __DISPLAYNAME = '__displayName',
    __GET = '__get',
    __SET = '__set',
    __CONFIGURABLE = '__configurable',
    __ENUMERABLE = '__enumerable',
    __SPECIAL_PROPS = [__VALIDATORS, __VALUE, __TYPE, __DISPLAYNAME, __GET, __SET, __CONFIGURABLE, __ENUMERABLE];

  var def = {
    validators: from[__VALIDATORS] || [],
    enumerable: from[__ENUMERABLE] === false ? false : true,
    configurable: from[__CONFIGURABLE] ? true : false,
    displayName: from[__DISPLAYNAME],
    getter: from[__GET],
    setter: from[__SET]
  };

  var type = from[__TYPE];

  // Simple 'Constructor' Type
  if (~[String, Number, Date, Boolean].indexOf(type)) {

    def.isSimple = true;

    def.cast = function(value) {
      return util.cast(value, type);
    };
    def.value = function() {
      return def.cast(from.__value);
    };

  } else {

    // If a value is present, use 
    // that and short-circuit the rest
    if (from.__value) {

      def.value = function() {
        return from.__value;
      };

      return def;
    }

    
    var keys = Object.keys(from);
    var childKeys = keys.filter(function(item) {
      return __SPECIAL_PROPS.indexOf(item) === -1;
    });

    var properties = {};
    
    childKeys.forEach(function(key) {
      child = createDef(from[key]);
      properties[key] = child;
    });
    
    def.properties = properties;

    // Check for Array
    if (type === Array || util.isArray(type)) {

      def.isArray = true;

      if (type.length > 0) {
        def.def = createDef(type[0]);
      }

    }
    
    def.value = function(parent) {
      return createModel(def, parent);
    };
    
  }

  return def;
}

function createFactory(from) {
  /**
   * Create a function that will take in anything and
   * return a function that will create the thing
   */

  var def = createDef(from);
  
  // Wrap any simple definitions
  // in an object with a value property
  if (def.isSimple) {
    def = createDef({
      value: from
    });
  }
  
  return function() {
    return def.value();
  };

}

window.createDef = createDef;
window.createFactory = createFactory;


// function Box(context, key, value, cast, validators, assert) {
//   this._context = context;
//   this._key = key;
//   this._wrapper = new Wrpper(value, cast, validators, assert);
// }
// Object.defineProperties(Box.prototype, {
//   errors: {
//     var errors = [];
//     var key = this._key;
//     var context = this._context;
//     var validators = this._wrapper.validators;
    
//     for (var i = 0; i < validators.length; i++) {
//       validator = validators[i];
//       key = validator.key;
//       error = validator.test.call(context, key ? context[key] : context, key);

//       if (error) {
//         errors.push(new ValidationError(this, error, validator, key));
//       }
//     }
    
//     return errors;
//   }
// });

// function Wrpper(value, cast, validators, assert) {
//   this.validators = validators;
//   if (cast) {
//     this._cast = cast;
//   }
  
//   if (assert) {
//     this._assert = assert;
//   }
  
//   this.value = value;
// }
// Object.defineProperties(Wrpper.prototype, {
//   value: {
//     get: function() {
//       return this._value;
//     },
//     set: function(value) {
//       var val = this._cast ? this._cast(value) : value;
//       if (this._assert) {
//         this._assert(val);
//       }
//       this._value = val;
//     }
//   }
// });

},{"./model":2,"emitter-array":3,"emitter-object":7}],2:[function(_dereq_,module,exports){
var EmitterEvent = _dereq_('emitter-event');
var ValidationError = _dereq_('./validation-error');

var descriptors = {
  __supermodel: {
    value: true
  },
  __keys: {
    get: function() {
      // var keys = Object.keys(this);
      // var omit = [
      //   'addEventListener', 'on', 'once', 'removeEventListener', 'removeAllListeners',
      //   'removeListener', 'off', 'emit', 'listeners', 'hasListeners', 'pop', 'push',
      //   'reverse', 'shift', 'sort', 'splice', 'update', 'unshift', 'create'
      // ];

      // keys = keys.filter(function(item) {
      //   return omit.indexOf(item) < 0;
      // });

      // return keys;
      return Object.keys(this.__properties);
    }
  },
  __name: {
    get: function() {
      if (this.__isRoot) {
        return '';
      }

      // Work out the 'name' of the model
      // Look up to the parent and loop through it's keys,
      // Any value or array found to contain the value of this (this model)
      // then we return the key and index in the case we found the model in an array.
      var parentKeys = this.__parent.__keys;
      var parentKey, parentValue, isArray;

      for (var i = 0; i < parentKeys.length; i++) {
        parentKey = parentKeys[i];
        parentValue = this.__parent[parentKey];
        isArray = Array.isArray(parentValue);

        if (parentValue === this) {
          return parentKey;
        }
      }
    }
  },
  __path: {
    get: function() {
      if (this.__hasAncestors && !this.__parent.__isRoot) {
        return this.__parent.__path + '.' + this.__name;
      } else {
        return this.__name;
      }
    }
  },
  __isRoot: {
    get: function() {
      return !this.__hasAncestors;
    }
  },
  __children: {
    get: function() {
      var children = [];

      var keys = this.__keys;
      var key, value;

      for (var i = 0; i < keys.length; i++) {

        key = keys[i];
        value = this[key];

        if (value && value.__supermodel) {

          children.push(value);

        }
      }

      return children;
    }
  },
  __ancestors: {
    get: function() {
      var ancestors = [],
        r = this;

      while (r.__parent) {
        ancestors.push(r.__parent);
        r = r.__parent;
      }

      return ancestors;
    }
  },
  __descendants: {
    get: function() {
      var descendants = [];

      function checkAndAddDescendantIfModel(obj) {

        var keys = obj.__keys;
        var key, value;

        for (var i = 0; i < keys.length; i++) {

          key = keys[i];
          value = obj[key];

          if (value && value.__supermodel) {

            descendants.push(value);
            checkAndAddDescendantIfModel(value);

          }
        }

      }

      checkAndAddDescendantIfModel(this);

      return descendants;
    }
  },
  __hasAncestors: {
    get: function() {
      return !!this.__ancestors.length;
    }
  },
  __hasDecendants: {
    get: function() {
      return !!this.__descendants.length;
    }
  },
  errors: {
    get: function() {
      var errors = [];
      var validators = this.__validators;
      var validator, key, error, child, i;

      if (validators) {

        for (i = 0; i < validators.length; i++) {
          validator = validators[i];
          key = validator.key;
          error = validator.test.call(this, key ? this[key] : this, key);

          if (error) {
            errors.push(new ValidationError(this, error, validator, key));
          }
        }
      }

      for (i = 0; i < this.__children.length; i++) {
        child = this.__children[i];
        Array.prototype.push.apply(errors, child.errors);
      }

      return errors;
    }
  }
};

var proto = {
  __get: function(key) {
    return this.__[key];
  },
  __set: function(key, value) {

    var oldValue = this.__[key];

    this.__[key] = value;

    var newValue = this.__get[key];

  },
  __notifyChange: function(key, newValue, oldValue) {
    // Emit change event against this model
    this.emit('change', new EmitterEvent('change', this, {
      name: key,
      value: newValue,
      oldValue: oldValue
    }));

    // Emit specific change event against this model
    this.emit('change:' + key, new EmitterEvent('change:' + key, this, {
      value: newValue,
      oldValue: oldValue
    }));

    // Bubble the change event up against the ancestors
    var name;
    for (var i = 0; i < this.__ancestors.length; i++) {

      name = this.__path + '.' + key;

      // Emit change event against this ancestor
      this.__ancestors[i].emit('change', new EmitterEvent('change', this, {
        name: name,
        value: newValue,
        oldValue: oldValue
      }));

      // Emit specific change event against this ancestor
      this.__ancestors[i].emit('change:' + name, new EmitterEvent('change:' + name, this, {
        name: name,
        value: newValue,
        oldValue: oldValue
      }));
    }
  },
  __setNotifyChange: function(key, value) {
    this.__set(key, value);
    this.__notifyChange(key, e);
  }
};

module.exports = {
  proto: proto,
  descriptors: descriptors,
};
},{"./validation-error":8,"emitter-event":6}],3:[function(_dereq_,module,exports){
var Emitter = _dereq_('emitter-object');
var EmitterEvent = _dereq_('emitter-event');

function result(name, arr, value) {
  var e = new EmitterEvent(name, arr, value);

  arr.emit(name, e);
  arr.emit('change', e);
}

module.exports = function(callback) {

  callback = callback || raiseEvent;
  
  /**
   * Construct an Array from the passed arguments
   */
  var arrCtorArgs = arguments;
  var arr = [];//Array.apply(null, arrCtorArgs);

  /**
   * Mixin Emitter to the Array instance
   */
  if (!callback) Emitter(arr);

  /**
   * Proxied array mutators methods
   *
   * @param {Object} obj
   * @return {Object}
   * @api private
   */
  var pop = function() {

    var result = Array.prototype.pop.apply(arr);

    callback('pop', arr, { value: result });

    return result;
  };
  var push = function() {

    var result = Array.prototype.push.apply(arr, arguments);

    callback('push', arr, { value: result });

    return result;
  };
  var reverse = function() {

    var result = Array.prototype.reverse.apply(arr);

    callback('reverse', arr, { value: result });

    return result;
  };
  var shift = function() {

    var result = Array.prototype.shift.apply(arr);

    callback('shift', arr, { value: result });

    return result;
  };
  var sort = function() {

    var result = Array.prototype.sort.apply(arr, arguments);

    callback('sort', arr, { value: result });

    return result;
  };
  var unshift = function() {

    var result = Array.prototype.unshift.apply(arr, arguments);

    callback('unshift', arr, { value: result });

    return result;
  };
  var splice = function() {

    if (!arguments.length) {
      return;
    }

    var result = Array.prototype.splice.apply(arr, arguments);

    callback('splice', arr, {
      value: result,
      removed: result,
      added: Array.prototype.slice.call(arguments, 2)
    });

    return result;
  };

  /**
   * Proxy all Array.prototype mutator methods on this array instance
   */
  arr.pop = arr.pop && pop;
  arr.push = arr.push && push;
  arr.reverse = arr.reverse && reverse;
  arr.shift = arr.shift && shift;
  arr.sort = arr.sort && sort;
  arr.splice = arr.splice && splice;

  /**
   * Special update function
   */
  arr.update = function(index, value) {

    var oldValue = arr[index];
    var newValue = arr[index] = value;

    callback('update', arr, {
      value: newValue,
      oldValue: oldValue
    });

    return newValue;
  };

  return arr;
};
},{"emitter-event":4,"emitter-object":5}],4:[function(_dereq_,module,exports){
module.exports = function EmitterEvent(name, target, detail) {
  this.name = name;
  this.target = target;
  
  if (detail) {
    this.detail = detail;
  }
};
},{}],5:[function(_dereq_,module,exports){

/**
 * Expose `Emitter`.
 */

module.exports = Emitter;

/**
 * Initialize a new `Emitter`.
 *
 * @api public
 */

function Emitter(obj) {
  var ctx = obj || this;
  
  var callbacks;
  Object.defineProperty(ctx, '__callbacks', {
    get: function() {
      return callbacks = callbacks || {};
    },
    set: function(value) {
      callbacks = value;
    }
  });
  
  if (obj) {
    ctx = mixin(obj);
    return ctx;
  }
}

/**
 * Mixin the emitter properties.
 *
 * @param {Object} obj
 * @return {Object}
 * @api private
 */

function mixin(obj) {
  for (var key in Emitter.prototype) {
    obj[key] = Emitter.prototype[key];
  }
  return obj;
}

/**
 * Listen on the given `event` with `fn`.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.on =
Emitter.prototype.addEventListener = function(event, fn){
  (this.__callbacks[event] = this.__callbacks[event] || [])
    .push(fn);
  return this;
};

/**
 * Adds an `event` listener that will be invoked a single
 * time then automatically removed.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.once = function(event, fn){
  function on() {
    this.off(event, on);
    fn.apply(this, arguments);
  }

  on.fn = fn;
  this.on(event, on);
  return this;
};

/**
 * Remove the given callback for `event` or all
 * registered callbacks.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.off =
Emitter.prototype.removeListener =
Emitter.prototype.removeAllListeners =
Emitter.prototype.removeEventListener = function(event, fn){
  
  // all
  if (0 == arguments.length) {
    this.__callbacks = {};
    return this;
  }

  // specific event
  var callbacks = this.__callbacks[event];
  if (!callbacks) return this;

  // remove all handlers
  if (1 == arguments.length) {
    delete this.__callbacks[event];
    return this;
  }

  // remove specific handler
  var cb;
  for (var i = 0; i < callbacks.length; i++) {
    cb = callbacks[i];
    if (cb === fn || cb.fn === fn) {
      callbacks.splice(i, 1);
      break;
    }
  }
  return this;
};

/**
 * Emit `event` with the given args.
 *
 * @param {String} event
 * @param {Mixed} ...
 * @return {Emitter}
 */

Emitter.prototype.emit = function(event) {
  var args = [].slice.call(arguments, 1)
    , callbacks = this.__callbacks[event];

  if (callbacks) {
    callbacks = callbacks.slice(0);
    for (var i = 0, len = callbacks.length; i < len; ++i) {
      callbacks[i].apply(this, args);
    }
  }

  return this;
};

/**
 * Return array of callbacks for `event`.
 *
 * @param {String} event
 * @return {Array}
 * @api public
 */

Emitter.prototype.listeners = function(event) {
  return this.__callbacks[event] || [];
};

/**
 * Check if this emitter has `event` handlers.
 *
 * @param {String} event
 * @return {Boolean}
 * @api public
 */

Emitter.prototype.hasListeners = function(event) {
  return !!this.listeners(event).length;
};

},{}],6:[function(_dereq_,module,exports){
module.exports=_dereq_(4)
},{}],7:[function(_dereq_,module,exports){
module.exports=_dereq_(5)
},{}],8:[function(_dereq_,module,exports){
function ValidationError(target, error, validator, key) {
  this.target = target;
  this.error = error;
  this.validator = validator;

  if (key) {
    this.key = key;
  }
}

module.exports = ValidationError;
},{}]},{},[1])
(1)
});